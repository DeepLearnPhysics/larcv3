# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_dataformat')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_dataformat')
    _dataformat = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dataformat', [dirname(__file__)])
        except ImportError:
            import _dataformat
            return _dataformat
        try:
            _mod = imp.load_module('_dataformat', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _dataformat = swig_import_helper()
    del swig_import_helper
else:
    import _dataformat
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dataformat.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _dataformat.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _dataformat.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _dataformat.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _dataformat.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _dataformat.SwigPyIterator_equal(self, x)

    def copy(self):
        return _dataformat.SwigPyIterator_copy(self)

    def next(self):
        return _dataformat.SwigPyIterator_next(self)

    def __next__(self):
        return _dataformat.SwigPyIterator___next__(self)

    def previous(self):
        return _dataformat.SwigPyIterator_previous(self)

    def advance(self, n):
        return _dataformat.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _dataformat.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _dataformat.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _dataformat.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _dataformat.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _dataformat.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _dataformat.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _dataformat.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Extents_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Extents_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Extents_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["first"] = _dataformat.Extents_t_first_set
    __swig_getmethods__["first"] = _dataformat.Extents_t_first_get
    if _newclass:
        first = _swig_property(_dataformat.Extents_t_first_get, _dataformat.Extents_t_first_set)
    __swig_setmethods__["n"] = _dataformat.Extents_t_n_set
    __swig_getmethods__["n"] = _dataformat.Extents_t_n_get
    if _newclass:
        n = _swig_property(_dataformat.Extents_t_n_get, _dataformat.Extents_t_n_set)

    def __init__(self):
        this = _dataformat.new_Extents_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dataformat.delete_Extents_t
    __del__ = lambda self: None
Extents_t_swigregister = _dataformat.Extents_t_swigregister
Extents_t_swigregister(Extents_t)
cvar = _dataformat.cvar
kINVALID_INDEX = cvar.kINVALID_INDEX
kINVALID_INSTANCEID = cvar.kINVALID_INSTANCEID
kINVALID_PROJECTIONID = cvar.kINVALID_PROJECTIONID

kDISCONNECTED = _dataformat.kDISCONNECTED
kDEAD = _dataformat.kDEAD
kLOWNOISE = _dataformat.kLOWNOISE
kNOISY = _dataformat.kNOISY
kGOOD = _dataformat.kGOOD
kUNKNOWN = _dataformat.kUNKNOWN
kUnitUnknown = _dataformat.kUnitUnknown
kUnitCM = _dataformat.kUnitCM
kUnitWireTime = _dataformat.kUnitWireTime
kPoolSum = _dataformat.kPoolSum
kPoolAverage = _dataformat.kPoolAverage
kPoolMax = _dataformat.kPoolMax
kShapeShower = _dataformat.kShapeShower
kShapeTrack = _dataformat.kShapeTrack
kShapeUnknown = _dataformat.kShapeUnknown
kPoint3D = _dataformat.kPoint3D
kPointXY = _dataformat.kPointXY
kPointYZ = _dataformat.kPointYZ
kPointZX = _dataformat.kPointZX
class Point2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point2D, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _dataformat.delete_Point2D
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _dataformat.new_Point2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["x"] = _dataformat.Point2D_x_set
    __swig_getmethods__["x"] = _dataformat.Point2D_x_get
    if _newclass:
        x = _swig_property(_dataformat.Point2D_x_get, _dataformat.Point2D_x_set)
    __swig_setmethods__["y"] = _dataformat.Point2D_y_set
    __swig_getmethods__["y"] = _dataformat.Point2D_y_get
    if _newclass:
        y = _swig_property(_dataformat.Point2D_y_get, _dataformat.Point2D_y_set)

    def __eq__(self, rhs):
        return _dataformat.Point2D___eq__(self, rhs)

    def __ne__(self, rhs):
        return _dataformat.Point2D___ne__(self, rhs)

    def __imul__(self, rhs):
        return _dataformat.Point2D___imul__(self, rhs)

    def __itruediv__(self, *args):
        return _dataformat.Point2D___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, rhs):
        return _dataformat.Point2D___iadd__(self, rhs)

    def __isub__(self, rhs):
        return _dataformat.Point2D___isub__(self, rhs)

    def __mul__(self, rhs):
        return _dataformat.Point2D___mul__(self, rhs)

    def __truediv__(self, *args):
        return _dataformat.Point2D___truediv__(self, *args)
    __div__ = __truediv__



    def __add__(self, rhs):
        return _dataformat.Point2D___add__(self, rhs)

    def __sub__(self, rhs):
        return _dataformat.Point2D___sub__(self, rhs)

    def squared_distance(self, pt):
        return _dataformat.Point2D_squared_distance(self, pt)

    def distance(self, pt):
        return _dataformat.Point2D_distance(self, pt)

    def direction(self, pt):
        return _dataformat.Point2D_direction(self, pt)
Point2D_swigregister = _dataformat.Point2D_swigregister
Point2D_swigregister(Point2D)
kINVALID_VOXELID = cvar.kINVALID_VOXELID
kNOTPRESENT = cvar.kNOTPRESENT
kNEGATIVEPEDESTAL = cvar.kNEGATIVEPEDESTAL
kINVALID_PRODUCER = cvar.kINVALID_PRODUCER

class Point3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point3D, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _dataformat.delete_Point3D
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _dataformat.new_Point3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["x"] = _dataformat.Point3D_x_set
    __swig_getmethods__["x"] = _dataformat.Point3D_x_get
    if _newclass:
        x = _swig_property(_dataformat.Point3D_x_get, _dataformat.Point3D_x_set)
    __swig_setmethods__["y"] = _dataformat.Point3D_y_set
    __swig_getmethods__["y"] = _dataformat.Point3D_y_get
    if _newclass:
        y = _swig_property(_dataformat.Point3D_y_get, _dataformat.Point3D_y_set)
    __swig_setmethods__["z"] = _dataformat.Point3D_z_set
    __swig_getmethods__["z"] = _dataformat.Point3D_z_get
    if _newclass:
        z = _swig_property(_dataformat.Point3D_z_get, _dataformat.Point3D_z_set)

    def __eq__(self, rhs):
        return _dataformat.Point3D___eq__(self, rhs)

    def __ne__(self, rhs):
        return _dataformat.Point3D___ne__(self, rhs)

    def __itruediv__(self, *args):
        return _dataformat.Point3D___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __imul__(self, rhs):
        return _dataformat.Point3D___imul__(self, rhs)

    def __iadd__(self, rhs):
        return _dataformat.Point3D___iadd__(self, rhs)

    def __isub__(self, rhs):
        return _dataformat.Point3D___isub__(self, rhs)

    def __truediv__(self, *args):
        return _dataformat.Point3D___truediv__(self, *args)
    __div__ = __truediv__



    def __mul__(self, rhs):
        return _dataformat.Point3D___mul__(self, rhs)

    def __add__(self, rhs):
        return _dataformat.Point3D___add__(self, rhs)

    def __sub__(self, rhs):
        return _dataformat.Point3D___sub__(self, rhs)

    def squared_distance(self, pt):
        return _dataformat.Point3D_squared_distance(self, pt)

    def distance(self, pt):
        return _dataformat.Point3D_distance(self, pt)

    def direction(self, pt):
        return _dataformat.Point3D_direction(self, pt)
Point3D_swigregister = _dataformat.Point3D_swigregister
Point3D_swigregister(Point3D)

class Vertex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vertex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vertex, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _dataformat.new_Vertex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self, *args):
        return _dataformat.Vertex_reset(self, *args)

    def as_point2d(self, point_type):
        return _dataformat.Vertex_as_point2d(self, point_type)

    def as_point3d(self):
        return _dataformat.Vertex_as_point3d(self)

    def as_point(self, point_type, x, y, z):
        return _dataformat.Vertex_as_point(self, point_type, x, y, z)

    def x(self):
        return _dataformat.Vertex_x(self)

    def y(self):
        return _dataformat.Vertex_y(self)

    def z(self):
        return _dataformat.Vertex_z(self)

    def t(self):
        return _dataformat.Vertex_t(self)

    def __eq__(self, rhs):
        return _dataformat.Vertex___eq__(self, rhs)

    def __ne__(self, rhs):
        return _dataformat.Vertex___ne__(self, rhs)

    def __lt__(self, rhs):
        return _dataformat.Vertex___lt__(self, rhs)

    def dump(self):
        return _dataformat.Vertex_dump(self)
    __swig_destroy__ = _dataformat.delete_Vertex
    __del__ = lambda self: None
Vertex_swigregister = _dataformat.Vertex_swigregister
Vertex_swigregister(Vertex)

PARTICLE_PROCESS_STRLEN = _dataformat.PARTICLE_PROCESS_STRLEN
class Particle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Particle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Particle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _dataformat.new_Particle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dataformat.delete_Particle
    __del__ = lambda self: None

    def px(self):
        return _dataformat.Particle_px(self)

    def py(self):
        return _dataformat.Particle_py(self)

    def pz(self):
        return _dataformat.Particle_pz(self)

    def p(self):
        return _dataformat.Particle_p(self)

    def x(self):
        return _dataformat.Particle_x(self)

    def y(self):
        return _dataformat.Particle_y(self)

    def z(self):
        return _dataformat.Particle_z(self)

    def t(self):
        return _dataformat.Particle_t(self)

    def parent_x(self):
        return _dataformat.Particle_parent_x(self)

    def parent_y(self):
        return _dataformat.Particle_parent_y(self)

    def parent_z(self):
        return _dataformat.Particle_parent_z(self)

    def parent_t(self):
        return _dataformat.Particle_parent_t(self)

    def ancestor_x(self):
        return _dataformat.Particle_ancestor_x(self)

    def ancestor_y(self):
        return _dataformat.Particle_ancestor_y(self)

    def ancestor_z(self):
        return _dataformat.Particle_ancestor_z(self)

    def ancestor_t(self):
        return _dataformat.Particle_ancestor_t(self)

    def id(self, *args):
        return _dataformat.Particle_id(self, *args)

    def mcst_index(self, *args):
        return _dataformat.Particle_mcst_index(self, *args)

    def mct_index(self, *args):
        return _dataformat.Particle_mct_index(self, *args)

    def shape(self, *args):
        return _dataformat.Particle_shape(self, *args)

    def nu_current_type(self, *args):
        return _dataformat.Particle_nu_current_type(self, *args)

    def nu_interaction_type(self, *args):
        return _dataformat.Particle_nu_interaction_type(self, *args)

    def track_id(self, *args):
        return _dataformat.Particle_track_id(self, *args)

    def pdg_code(self, *args):
        return _dataformat.Particle_pdg_code(self, *args)

    def momentum(self, px, py, pz):
        return _dataformat.Particle_momentum(self, px, py, pz)

    def position(self, *args):
        return _dataformat.Particle_position(self, *args)

    def end_position(self, *args):
        return _dataformat.Particle_end_position(self, *args)

    def first_step(self, *args):
        return _dataformat.Particle_first_step(self, *args)

    def last_step(self, *args):
        return _dataformat.Particle_last_step(self, *args)

    def distance_travel(self, *args):
        return _dataformat.Particle_distance_travel(self, *args)

    def energy_init(self, *args):
        return _dataformat.Particle_energy_init(self, *args)

    def energy_deposit(self, *args):
        return _dataformat.Particle_energy_deposit(self, *args)

    def creation_process(self, *args):
        return _dataformat.Particle_creation_process(self, *args)

    def parent_track_id(self, *args):
        return _dataformat.Particle_parent_track_id(self, *args)

    def parent_pdg_code(self, *args):
        return _dataformat.Particle_parent_pdg_code(self, *args)

    def parent_position(self, *args):
        return _dataformat.Particle_parent_position(self, *args)

    def ancestor_track_id(self, *args):
        return _dataformat.Particle_ancestor_track_id(self, *args)

    def ancestor_pdg_code(self, *args):
        return _dataformat.Particle_ancestor_pdg_code(self, *args)

    def ancestor_position(self, *args):
        return _dataformat.Particle_ancestor_position(self, *args)

    def dump(self):
        return _dataformat.Particle_dump(self)
Particle_swigregister = _dataformat.Particle_swigregister
Particle_swigregister(Particle)

class Voxel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Voxel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Voxel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _dataformat.new_Voxel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dataformat.delete_Voxel
    __del__ = lambda self: None

    def id(self):
        return _dataformat.Voxel_id(self)

    def value(self):
        return _dataformat.Voxel_value(self)

    def set(self, id, value):
        return _dataformat.Voxel_set(self, id, value)

    def __iadd__(self, value):
        return _dataformat.Voxel___iadd__(self, value)

    def __isub__(self, value):
        return _dataformat.Voxel___isub__(self, value)

    def __imul__(self, factor):
        return _dataformat.Voxel___imul__(self, factor)

    def __itruediv__(self, *args):
        return _dataformat.Voxel___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __eq__(self, *args):
        return _dataformat.Voxel___eq__(self, *args)

    def __lt__(self, *args):
        return _dataformat.Voxel___lt__(self, *args)

    def __le__(self, *args):
        return _dataformat.Voxel___le__(self, *args)

    def __gt__(self, *args):
        return _dataformat.Voxel___gt__(self, *args)

    def __ge__(self, *args):
        return _dataformat.Voxel___ge__(self, *args)
Voxel_swigregister = _dataformat.Voxel_swigregister
Voxel_swigregister(Voxel)

class kINVALID_VOXEL(Voxel):
    __swig_setmethods__ = {}
    for _s in [Voxel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, kINVALID_VOXEL, name, value)
    __swig_getmethods__ = {}
    for _s in [Voxel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, kINVALID_VOXEL, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getInstance = staticmethod(_dataformat.kINVALID_VOXEL_getInstance)
    else:
        getInstance = _dataformat.kINVALID_VOXEL_getInstance
    __swig_destroy__ = _dataformat.delete_kINVALID_VOXEL
    __del__ = lambda self: None
kINVALID_VOXEL_swigregister = _dataformat.kINVALID_VOXEL_swigregister
kINVALID_VOXEL_swigregister(kINVALID_VOXEL)

def kINVALID_VOXEL_getInstance():
    return _dataformat.kINVALID_VOXEL_getInstance()
kINVALID_VOXEL_getInstance = _dataformat.kINVALID_VOXEL_getInstance

class VoxelSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VoxelSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VoxelSet, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _dataformat.new_VoxelSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dataformat.delete_VoxelSet
    __del__ = lambda self: None

    def as_vector(self):
        return _dataformat.VoxelSet_as_vector(self)

    def find(self, id):
        return _dataformat.VoxelSet_find(self, id)

    def sum(self):
        return _dataformat.VoxelSet_sum(self)

    def mean(self):
        return _dataformat.VoxelSet_mean(self)

    def max(self):
        return _dataformat.VoxelSet_max(self)

    def min(self):
        return _dataformat.VoxelSet_min(self)

    def size(self):
        return _dataformat.VoxelSet_size(self)

    def clear_data(self):
        return _dataformat.VoxelSet_clear_data(self)

    def reserve(self, num):
        return _dataformat.VoxelSet_reserve(self, num)

    def threshold(self, min, max):
        return _dataformat.VoxelSet_threshold(self, min, max)

    def threshold_min(self, min):
        return _dataformat.VoxelSet_threshold_min(self, min)

    def threshold_max(self, max):
        return _dataformat.VoxelSet_threshold_max(self, max)

    def add(self, vox):
        return _dataformat.VoxelSet_add(self, vox)

    def insert(self, vox):
        return _dataformat.VoxelSet_insert(self, vox)

    def emplace(self, *args):
        return _dataformat.VoxelSet_emplace(self, *args)

    def id(self, *args):
        return _dataformat.VoxelSet_id(self, *args)

    def __iadd__(self, value):
        return _dataformat.VoxelSet___iadd__(self, value)

    def __isub__(self, value):
        return _dataformat.VoxelSet___isub__(self, value)

    def __imul__(self, factor):
        return _dataformat.VoxelSet___imul__(self, factor)

    def __itruediv__(self, *args):
        return _dataformat.VoxelSet___itruediv__(self, *args)
    __idiv__ = __itruediv__


VoxelSet_swigregister = _dataformat.VoxelSet_swigregister
VoxelSet_swigregister(VoxelSet)

class VoxelSetArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VoxelSetArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VoxelSetArray, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _dataformat.new_VoxelSetArray()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dataformat.delete_VoxelSetArray
    __del__ = lambda self: None

    def size(self):
        return _dataformat.VoxelSetArray_size(self)

    def voxel_set(self, id):
        return _dataformat.VoxelSetArray_voxel_set(self, id)

    def as_vector(self):
        return _dataformat.VoxelSetArray_as_vector(self)

    def sum(self):
        return _dataformat.VoxelSetArray_sum(self)

    def mean(self):
        return _dataformat.VoxelSetArray_mean(self)

    def max(self):
        return _dataformat.VoxelSetArray_max(self)

    def min(self):
        return _dataformat.VoxelSetArray_min(self)

    def threshold(self, min, max):
        return _dataformat.VoxelSetArray_threshold(self, min, max)

    def threshold_min(self, min):
        return _dataformat.VoxelSetArray_threshold_min(self, min)

    def threshold_max(self, max):
        return _dataformat.VoxelSetArray_threshold_max(self, max)

    def clear_data(self):
        return _dataformat.VoxelSetArray_clear_data(self)

    def resize(self, num):
        return _dataformat.VoxelSetArray_resize(self, num)

    def writeable_voxel_set(self, id):
        return _dataformat.VoxelSetArray_writeable_voxel_set(self, id)

    def emplace(self, *args):
        return _dataformat.VoxelSetArray_emplace(self, *args)

    def insert(self, voxel_v):
        return _dataformat.VoxelSetArray_insert(self, voxel_v)

    def move(self, orig):
        return _dataformat.VoxelSetArray_move(self, orig)
VoxelSetArray_swigregister = _dataformat.VoxelSetArray_swigregister
VoxelSetArray_swigregister(VoxelSetArray)

class ImageMeta(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageMeta, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageMeta, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _dataformat.new_ImageMeta(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, rhs):
        return _dataformat.ImageMeta___eq__(self, rhs)

    def __ne__(self, rhs):
        return _dataformat.ImageMeta___ne__(self, rhs)

    def n_dims(self):
        return _dataformat.ImageMeta_n_dims(self)

    def image_size(self, *args):
        return _dataformat.ImageMeta_image_size(self, *args)

    def number_of_voxels(self, *args):
        return _dataformat.ImageMeta_number_of_voxels(self, *args)

    def total_voxels(self):
        return _dataformat.ImageMeta_total_voxels(self)

    def voxel_dimensions(self, *args):
        return _dataformat.ImageMeta_voxel_dimensions(self, *args)

    def unit(self):
        return _dataformat.ImageMeta_unit(self)

    def index(self, *args):
        return _dataformat.ImageMeta_index(self, *args)

    def coordinates(self, *args):
        return _dataformat.ImageMeta_coordinates(self, *args)

    def coordinate(self, index, axis):
        return _dataformat.ImageMeta_coordinate(self, index, axis)

    def position(self, *args):
        return _dataformat.ImageMeta_position(self, *args)

    def min(self, *args):
        return _dataformat.ImageMeta_min(self, *args)

    def max(self, *args):
        return _dataformat.ImageMeta_max(self, *args)

    def position_to_index(self, position):
        return _dataformat.ImageMeta_position_to_index(self, position)

    def position_to_coordinate(self, *args):
        return _dataformat.ImageMeta_position_to_coordinate(self, *args)
    __swig_destroy__ = _dataformat.delete_ImageMeta
    __del__ = lambda self: None
ImageMeta_swigregister = _dataformat.ImageMeta_swigregister
ImageMeta_swigregister(ImageMeta)

class EventID(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _dataformat.new_EventID(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dataformat.delete_EventID
    __del__ = lambda self: None

    def clear(self):
        return _dataformat.EventID_clear(self)

    def run(self, *args):
        return _dataformat.EventID_run(self, *args)

    def subrun(self, *args):
        return _dataformat.EventID_subrun(self, *args)

    def event(self, *args):
        return _dataformat.EventID_event(self, *args)

    def valid(self):
        return _dataformat.EventID_valid(self)

    def __eq__(self, rhs):
        return _dataformat.EventID___eq__(self, rhs)

    def __ne__(self, rhs):
        return _dataformat.EventID___ne__(self, rhs)

    def __lt__(self, rhs):
        return _dataformat.EventID___lt__(self, rhs)

    def event_key(self):
        return _dataformat.EventID_event_key(self)

    def set_id(self, run, subrun, event):
        return _dataformat.EventID_set_id(self, run, subrun, event)
EventID_swigregister = _dataformat.EventID_swigregister
EventID_swigregister(EventID)

class EventBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clear(self):
        return _dataformat.EventBase_clear(self)

    def initialize(self, arg2):
        return _dataformat.EventBase_initialize(self, arg2)

    def serialize(self, group):
        return _dataformat.EventBase_serialize(self, group)

    def deserialize(self, group, entry):
        return _dataformat.EventBase_deserialize(self, group, entry)
    __swig_destroy__ = _dataformat.delete_EventBase
    __del__ = lambda self: None
EventBase_swigregister = _dataformat.EventBase_swigregister
EventBase_swigregister(EventBase)

class DataProductFactoryBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataProductFactoryBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataProductFactoryBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dataformat.delete_DataProductFactoryBase
    __del__ = lambda self: None

    def create(self):
        return _dataformat.DataProductFactoryBase_create(self)
DataProductFactoryBase_swigregister = _dataformat.DataProductFactoryBase_swigregister
DataProductFactoryBase_swigregister(DataProductFactoryBase)

class DataProductFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataProductFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataProductFactory, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _dataformat.new_DataProductFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dataformat.delete_DataProductFactory
    __del__ = lambda self: None
    if _newclass:
        get = staticmethod(_dataformat.DataProductFactory_get)
    else:
        get = _dataformat.DataProductFactory_get

    def add_factory(self, type, factory):
        return _dataformat.DataProductFactory_add_factory(self, type, factory)

    def create(self, *args):
        return _dataformat.DataProductFactory_create(self, *args)

    def list(self):
        return _dataformat.DataProductFactory_list(self)

    def unique_product_count(self):
        return _dataformat.DataProductFactory_unique_product_count(self)

    def product_names(self):
        return _dataformat.DataProductFactory_product_names(self)
DataProductFactory_swigregister = _dataformat.DataProductFactory_swigregister
DataProductFactory_swigregister(DataProductFactory)

def DataProductFactory_get():
    return _dataformat.DataProductFactory_get()
DataProductFactory_get = _dataformat.DataProductFactory_get

class IOManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IOManager, name)
    __repr__ = _swig_repr
    kREAD = _dataformat.IOManager_kREAD
    kWRITE = _dataformat.IOManager_kWRITE
    kBOTH = _dataformat.IOManager_kBOTH

    def __init__(self, *args):
        this = _dataformat.new_IOManager(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dataformat.delete_IOManager
    __del__ = lambda self: None

    def io_mode(self):
        return _dataformat.IOManager_io_mode(self)

    def reset(self):
        return _dataformat.IOManager_reset(self)

    def add_in_file(self, *args):
        return _dataformat.IOManager_add_in_file(self, *args)

    def clear_in_file(self):
        return _dataformat.IOManager_clear_in_file(self)

    def set_out_file(self, name):
        return _dataformat.IOManager_set_out_file(self, name)

    def producer_id(self, name):
        return _dataformat.IOManager_producer_id(self, name)

    def product_type(self, id):
        return _dataformat.IOManager_product_type(self, id)

    def configure(self, cfg):
        return _dataformat.IOManager_configure(self, cfg)

    def initialize(self):
        return _dataformat.IOManager_initialize(self)

    def read_entry(self, index, force_reload=False):
        return _dataformat.IOManager_read_entry(self, index, force_reload)

    def save_entry(self):
        return _dataformat.IOManager_save_entry(self)

    def finalize(self):
        return _dataformat.IOManager_finalize(self)

    def clear_entry(self):
        return _dataformat.IOManager_clear_entry(self)

    def set_id(self, run, subrun, event):
        return _dataformat.IOManager_set_id(self, run, subrun, event)

    def current_entry(self):
        return _dataformat.IOManager_current_entry(self)

    def get_n_entries_out(self):
        return _dataformat.IOManager_get_n_entries_out(self)

    def get_file_out_name(self):
        return _dataformat.IOManager_get_file_out_name(self)

    def get_n_entries(self):
        return _dataformat.IOManager_get_n_entries(self)

    def get_data(self, *args):
        return _dataformat.IOManager_get_data(self, *args)

    def event_id(self):
        return _dataformat.IOManager_event_id(self)

    def last_event_id(self):
        return _dataformat.IOManager_last_event_id(self)

    def producer_list(self, type):
        return _dataformat.IOManager_producer_list(self, type)

    def product_list(self):
        return _dataformat.IOManager_product_list(self)

    def file_list(self):
        return _dataformat.IOManager_file_list(self)
IOManager_swigregister = _dataformat.IOManager_swigregister
IOManager_swigregister(IOManager)

class EventParticle(EventBase):
    __swig_setmethods__ = {}
    for _s in [EventBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventParticle, name, value)
    __swig_getmethods__ = {}
    for _s in [EventBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventParticle, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _dataformat.new_EventParticle()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dataformat.delete_EventParticle
    __del__ = lambda self: None

    def set(self, part_v):
        return _dataformat.EventParticle_set(self, part_v)

    def append(self, part):
        return _dataformat.EventParticle_append(self, part)

    def emplace_back(self, part):
        return _dataformat.EventParticle_emplace_back(self, part)

    def emplace(self, part_v):
        return _dataformat.EventParticle_emplace(self, part_v)

    def as_vector(self):
        return _dataformat.EventParticle_as_vector(self)

    def size(self):
        return _dataformat.EventParticle_size(self)

    def clear(self):
        return _dataformat.EventParticle_clear(self)

    def initialize(self, group):
        return _dataformat.EventParticle_initialize(self, group)

    def serialize(self, group):
        return _dataformat.EventParticle_serialize(self, group)

    def deserialize(self, group, entry):
        return _dataformat.EventParticle_deserialize(self, group, entry)
    if _newclass:
        to_particle = staticmethod(_dataformat.EventParticle_to_particle)
    else:
        to_particle = _dataformat.EventParticle_to_particle
EventParticle_swigregister = _dataformat.EventParticle_swigregister
EventParticle_swigregister(EventParticle)

def EventParticle_to_particle(e):
    return _dataformat.EventParticle_to_particle(e)
EventParticle_to_particle = _dataformat.EventParticle_to_particle

class EventParticleFactory(DataProductFactoryBase):
    __swig_setmethods__ = {}
    for _s in [DataProductFactoryBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventParticleFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [DataProductFactoryBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventParticleFactory, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _dataformat.new_EventParticleFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dataformat.delete_EventParticleFactory
    __del__ = lambda self: None

    def create(self):
        return _dataformat.EventParticleFactory_create(self)
EventParticleFactory_swigregister = _dataformat.EventParticleFactory_swigregister
EventParticleFactory_swigregister(EventParticleFactory)

class VectorOfVoxel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfVoxel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfVoxel, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dataformat.VectorOfVoxel_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dataformat.VectorOfVoxel___nonzero__(self)

    def __bool__(self):
        return _dataformat.VectorOfVoxel___bool__(self)

    def __len__(self):
        return _dataformat.VectorOfVoxel___len__(self)

    def __getslice__(self, i, j):
        return _dataformat.VectorOfVoxel___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dataformat.VectorOfVoxel___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dataformat.VectorOfVoxel___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dataformat.VectorOfVoxel___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dataformat.VectorOfVoxel___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dataformat.VectorOfVoxel___setitem__(self, *args)

    def pop(self):
        return _dataformat.VectorOfVoxel_pop(self)

    def append(self, x):
        return _dataformat.VectorOfVoxel_append(self, x)

    def empty(self):
        return _dataformat.VectorOfVoxel_empty(self)

    def size(self):
        return _dataformat.VectorOfVoxel_size(self)

    def swap(self, v):
        return _dataformat.VectorOfVoxel_swap(self, v)

    def begin(self):
        return _dataformat.VectorOfVoxel_begin(self)

    def end(self):
        return _dataformat.VectorOfVoxel_end(self)

    def rbegin(self):
        return _dataformat.VectorOfVoxel_rbegin(self)

    def rend(self):
        return _dataformat.VectorOfVoxel_rend(self)

    def clear(self):
        return _dataformat.VectorOfVoxel_clear(self)

    def get_allocator(self):
        return _dataformat.VectorOfVoxel_get_allocator(self)

    def pop_back(self):
        return _dataformat.VectorOfVoxel_pop_back(self)

    def erase(self, *args):
        return _dataformat.VectorOfVoxel_erase(self, *args)

    def __init__(self, *args):
        this = _dataformat.new_VectorOfVoxel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dataformat.VectorOfVoxel_push_back(self, x)

    def front(self):
        return _dataformat.VectorOfVoxel_front(self)

    def back(self):
        return _dataformat.VectorOfVoxel_back(self)

    def assign(self, n, x):
        return _dataformat.VectorOfVoxel_assign(self, n, x)

    def resize(self, *args):
        return _dataformat.VectorOfVoxel_resize(self, *args)

    def insert(self, *args):
        return _dataformat.VectorOfVoxel_insert(self, *args)

    def reserve(self, n):
        return _dataformat.VectorOfVoxel_reserve(self, n)

    def capacity(self):
        return _dataformat.VectorOfVoxel_capacity(self)
    __swig_destroy__ = _dataformat.delete_VectorOfVoxel
    __del__ = lambda self: None
VectorOfVoxel_swigregister = _dataformat.VectorOfVoxel_swigregister
VectorOfVoxel_swigregister(VectorOfVoxel)

class VectorOfVoxelSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfVoxelSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfVoxelSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dataformat.VectorOfVoxelSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dataformat.VectorOfVoxelSet___nonzero__(self)

    def __bool__(self):
        return _dataformat.VectorOfVoxelSet___bool__(self)

    def __len__(self):
        return _dataformat.VectorOfVoxelSet___len__(self)

    def __getslice__(self, i, j):
        return _dataformat.VectorOfVoxelSet___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dataformat.VectorOfVoxelSet___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dataformat.VectorOfVoxelSet___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dataformat.VectorOfVoxelSet___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dataformat.VectorOfVoxelSet___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dataformat.VectorOfVoxelSet___setitem__(self, *args)

    def pop(self):
        return _dataformat.VectorOfVoxelSet_pop(self)

    def append(self, x):
        return _dataformat.VectorOfVoxelSet_append(self, x)

    def empty(self):
        return _dataformat.VectorOfVoxelSet_empty(self)

    def size(self):
        return _dataformat.VectorOfVoxelSet_size(self)

    def swap(self, v):
        return _dataformat.VectorOfVoxelSet_swap(self, v)

    def begin(self):
        return _dataformat.VectorOfVoxelSet_begin(self)

    def end(self):
        return _dataformat.VectorOfVoxelSet_end(self)

    def rbegin(self):
        return _dataformat.VectorOfVoxelSet_rbegin(self)

    def rend(self):
        return _dataformat.VectorOfVoxelSet_rend(self)

    def clear(self):
        return _dataformat.VectorOfVoxelSet_clear(self)

    def get_allocator(self):
        return _dataformat.VectorOfVoxelSet_get_allocator(self)

    def pop_back(self):
        return _dataformat.VectorOfVoxelSet_pop_back(self)

    def erase(self, *args):
        return _dataformat.VectorOfVoxelSet_erase(self, *args)

    def __init__(self, *args):
        this = _dataformat.new_VectorOfVoxelSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dataformat.VectorOfVoxelSet_push_back(self, x)

    def front(self):
        return _dataformat.VectorOfVoxelSet_front(self)

    def back(self):
        return _dataformat.VectorOfVoxelSet_back(self)

    def assign(self, n, x):
        return _dataformat.VectorOfVoxelSet_assign(self, n, x)

    def resize(self, *args):
        return _dataformat.VectorOfVoxelSet_resize(self, *args)

    def insert(self, *args):
        return _dataformat.VectorOfVoxelSet_insert(self, *args)

    def reserve(self, n):
        return _dataformat.VectorOfVoxelSet_reserve(self, n)

    def capacity(self):
        return _dataformat.VectorOfVoxelSet_capacity(self)
    __swig_destroy__ = _dataformat.delete_VectorOfVoxelSet
    __del__ = lambda self: None
VectorOfVoxelSet_swigregister = _dataformat.VectorOfVoxelSet_swigregister
VectorOfVoxelSet_swigregister(VectorOfVoxelSet)

class VectorOfParticle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfParticle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfParticle, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dataformat.VectorOfParticle_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dataformat.VectorOfParticle___nonzero__(self)

    def __bool__(self):
        return _dataformat.VectorOfParticle___bool__(self)

    def __len__(self):
        return _dataformat.VectorOfParticle___len__(self)

    def __getslice__(self, i, j):
        return _dataformat.VectorOfParticle___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dataformat.VectorOfParticle___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dataformat.VectorOfParticle___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dataformat.VectorOfParticle___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dataformat.VectorOfParticle___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dataformat.VectorOfParticle___setitem__(self, *args)

    def pop(self):
        return _dataformat.VectorOfParticle_pop(self)

    def append(self, x):
        return _dataformat.VectorOfParticle_append(self, x)

    def empty(self):
        return _dataformat.VectorOfParticle_empty(self)

    def size(self):
        return _dataformat.VectorOfParticle_size(self)

    def swap(self, v):
        return _dataformat.VectorOfParticle_swap(self, v)

    def begin(self):
        return _dataformat.VectorOfParticle_begin(self)

    def end(self):
        return _dataformat.VectorOfParticle_end(self)

    def rbegin(self):
        return _dataformat.VectorOfParticle_rbegin(self)

    def rend(self):
        return _dataformat.VectorOfParticle_rend(self)

    def clear(self):
        return _dataformat.VectorOfParticle_clear(self)

    def get_allocator(self):
        return _dataformat.VectorOfParticle_get_allocator(self)

    def pop_back(self):
        return _dataformat.VectorOfParticle_pop_back(self)

    def erase(self, *args):
        return _dataformat.VectorOfParticle_erase(self, *args)

    def __init__(self, *args):
        this = _dataformat.new_VectorOfParticle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dataformat.VectorOfParticle_push_back(self, x)

    def front(self):
        return _dataformat.VectorOfParticle_front(self)

    def back(self):
        return _dataformat.VectorOfParticle_back(self)

    def assign(self, n, x):
        return _dataformat.VectorOfParticle_assign(self, n, x)

    def resize(self, *args):
        return _dataformat.VectorOfParticle_resize(self, *args)

    def insert(self, *args):
        return _dataformat.VectorOfParticle_insert(self, *args)

    def reserve(self, n):
        return _dataformat.VectorOfParticle_reserve(self, n)

    def capacity(self):
        return _dataformat.VectorOfParticle_capacity(self)
    __swig_destroy__ = _dataformat.delete_VectorOfParticle
    __del__ = lambda self: None
VectorOfParticle_swigregister = _dataformat.VectorOfParticle_swigregister
VectorOfParticle_swigregister(VectorOfParticle)

# This file is compatible with both classic and new-style classes.


