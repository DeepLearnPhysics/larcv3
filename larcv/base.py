# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_base')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_base')
    _base = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_base', [dirname(__file__)])
        except ImportError:
            import _base
            return _base
        try:
            _mod = imp.load_module('_base', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _base = swig_import_helper()
    del swig_import_helper
else:
    import _base
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _base.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _base.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _base.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _base.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _base.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _base.SwigPyIterator_equal(self, x)

    def copy(self):
        return _base.SwigPyIterator_copy(self)

    def next(self):
        return _base.SwigPyIterator_next(self)

    def __next__(self):
        return _base.SwigPyIterator___next__(self)

    def previous(self):
        return _base.SwigPyIterator_previous(self)

    def advance(self, n):
        return _base.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _base.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _base.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _base.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _base.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _base.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _base.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _base.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

kDEBUG = _base.kDEBUG
kINFO = _base.kINFO
kNORMAL = _base.kNORMAL
kWARNING = _base.kWARNING
kERROR = _base.kERROR
kCRITICAL = _base.kCRITICAL
kMSG_TYPE_MAX = _base.kMSG_TYPE_MAX
class logger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, logger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, logger, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _base.new_logger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _base.delete_logger
    __del__ = lambda self: None

    def name(self):
        return _base.logger_name(self)

    def set(self, level):
        return _base.logger_set(self, level)

    def level(self):
        return _base.logger_level(self)

    def __lt__(self, rhs):
        return _base.logger___lt__(self, rhs)
    if _newclass:
        get = staticmethod(_base.logger_get)
    else:
        get = _base.logger_get
    if _newclass:
        get_shared = staticmethod(_base.logger_get_shared)
    else:
        get_shared = _base.logger_get_shared
    if _newclass:
        default_level = staticmethod(_base.logger_default_level)
    else:
        default_level = _base.logger_default_level
    if _newclass:
        force_level = staticmethod(_base.logger_force_level)
    else:
        force_level = _base.logger_force_level

    def debug(self):
        return _base.logger_debug(self)

    def info(self):
        return _base.logger_info(self)

    def normal(self):
        return _base.logger_normal(self)

    def warning(self):
        return _base.logger_warning(self)

    def error(self):
        return _base.logger_error(self)

    def send(self, *args):
        return _base.logger_send(self, *args)
logger_swigregister = _base.logger_swigregister
logger_swigregister(logger)
cvar = _base.cvar
kINVALID_LONGLONG = cvar.kINVALID_LONGLONG
kINVALID_ULONGLONG = cvar.kINVALID_ULONGLONG
kINVALID_SIZE = cvar.kINVALID_SIZE
kINVALID_INT = cvar.kINVALID_INT
kINVALID_UINT = cvar.kINVALID_UINT
kINVALID_SHORT = cvar.kINVALID_SHORT
kINVALID_USHORT = cvar.kINVALID_USHORT
kINVALID_FLOAT = cvar.kINVALID_FLOAT
kINVALID_DOUBLE = cvar.kINVALID_DOUBLE
kStringPrefix = cvar.kStringPrefix

def logger_get(name):
    return _base.logger_get(name)
logger_get = _base.logger_get

def logger_get_shared():
    return _base.logger_get_shared()
logger_get_shared = _base.logger_get_shared

def logger_default_level(*args):
    return _base.logger_default_level(*args)
logger_default_level = _base.logger_default_level

def logger_force_level(l):
    return _base.logger_force_level(l)
logger_force_level = _base.logger_force_level

class larcv_base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, larcv_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, larcv_base, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _base.new_larcv_base(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _base.delete_larcv_base
    __del__ = lambda self: None

    def logger(self):
        return _base.larcv_base_logger(self)

    def set_verbosity(self, level):
        return _base.larcv_base_set_verbosity(self, level)

    def name(self):
        return _base.larcv_base_name(self)
larcv_base_swigregister = _base.larcv_base_swigregister
larcv_base_swigregister(larcv_base)


def ConfigFile2String(fname):
    return _base.ConfigFile2String(fname)
ConfigFile2String = _base.ConfigFile2String

def CreatePSetFromFile(*args):
    return _base.CreatePSetFromFile(*args)
CreatePSetFromFile = _base.CreatePSetFromFile
class PSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSet, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _base.delete_PSet
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _base.new_PSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def name(self):
        return _base.PSet_name(self)

    def __eq__(self, rhs):
        return _base.PSet___eq__(self, rhs)

    def __ne__(self, rhs):
        return _base.PSet___ne__(self, rhs)

    def rename(self, name):
        return _base.PSet_rename(self, name)

    def clear(self):
        return _base.PSet_clear(self)

    def add(self, data):
        return _base.PSet_add(self, data)

    def add_value(self, key, value):
        return _base.PSet_add_value(self, key, value)

    def add_pset(self, *args):
        return _base.PSet_add_pset(self, *args)

    def dump(self, indent_size=0):
        return _base.PSet_dump(self, indent_size)

    def data_string(self):
        return _base.PSet_data_string(self)

    def get_pset(self, key):
        return _base.PSet_get_pset(self, key)

    def size(self):
        return _base.PSet_size(self)

    def keys(self):
        return _base.PSet_keys(self)

    def value_keys(self):
        return _base.PSet_value_keys(self)

    def pset_keys(self):
        return _base.PSet_pset_keys(self)

    def contains_value(self, key):
        return _base.PSet_contains_value(self, key)

    def contains_pset(self, key):
        return _base.PSet_contains_pset(self, key)
PSet_swigregister = _base.PSet_swigregister
PSet_swigregister(PSet)

class Watch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Watch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Watch, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _base.new_Watch()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _base.delete_Watch
    __del__ = lambda self: None

    def Start(self):
        return _base.Watch_Start(self)

    def WallTime(self):
        return _base.Watch_WallTime(self)

    def CPUTime(self):
        return _base.Watch_CPUTime(self)
Watch_swigregister = _base.Watch_swigregister
Watch_swigregister(Watch)

class ConfigManager(larcv_base):
    __swig_setmethods__ = {}
    for _s in [larcv_base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigManager, name, value)
    __swig_getmethods__ = {}
    for _s in [larcv_base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigManager, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _base.new_ConfigManager()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _base.delete_ConfigManager
    __del__ = lambda self: None
    if _newclass:
        get = staticmethod(_base.ConfigManager_get)
    else:
        get = _base.ConfigManager_get

    def AddConfigFile(self, cfg_file):
        return _base.ConfigManager_AddConfigFile(self, cfg_file)

    def AddConfigString(self, cfg_str):
        return _base.ConfigManager_AddConfigString(self, cfg_str)

    def GetConfig(self, cfg):
        return _base.ConfigManager_GetConfig(self, cfg)
ConfigManager_swigregister = _base.ConfigManager_swigregister
ConfigManager_swigregister(ConfigManager)

def ConfigManager_get():
    return _base.ConfigManager_get()
ConfigManager_get = _base.ConfigManager_get

# This file is compatible with both classic and new-style classes.


