# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_processor')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_processor')
    _processor = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_processor', [dirname(__file__)])
        except ImportError:
            import _processor
            return _processor
        try:
            _mod = imp.load_module('_processor', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _processor = swig_import_helper()
    del swig_import_helper
else:
    import _processor
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class ProcessBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProcessBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProcessBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _processor.delete_ProcessBase
    __del__ = lambda self: None

    def configure(self, arg2):
        return _processor.ProcessBase_configure(self, arg2)

    def initialize(self):
        return _processor.ProcessBase_initialize(self)

    def process(self, mgr):
        return _processor.ProcessBase_process(self, mgr)

    def finalize(self):
        return _processor.ProcessBase_finalize(self)

    def _is_(self, question):
        return _processor.ProcessBase__is_(self, question)

    def event_creator(self):
        return _processor.ProcessBase_event_creator(self)
ProcessBase_swigregister = _processor.ProcessBase_swigregister
ProcessBase_swigregister(ProcessBase)

class ProcessDriver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProcessDriver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProcessDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _processor.new_ProcessDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _processor.delete_ProcessDriver
    __del__ = lambda self: None

    def configure(self, *args):
        return _processor.ProcessDriver_configure(self, *args)

    def override_input_file(self, flist):
        return _processor.ProcessDriver_override_input_file(self, flist)

    def override_output_file(self, fname):
        return _processor.ProcessDriver_override_output_file(self, fname)

    def override_ana_file(self, fname):
        return _processor.ProcessDriver_override_ana_file(self, fname)

    def random_access(self, flag):
        return _processor.ProcessDriver_random_access(self, flag)

    def reset(self):
        return _processor.ProcessDriver_reset(self)

    def initialize(self):
        return _processor.ProcessDriver_initialize(self)

    def batch_process(self, start_entry=0, num_entries=0):
        return _processor.ProcessDriver_batch_process(self, start_entry, num_entries)

    def process_entry(self, *args):
        return _processor.ProcessDriver_process_entry(self, *args)

    def finalize(self):
        return _processor.ProcessDriver_finalize(self)

    def clear_entry(self):
        return _processor.ProcessDriver_clear_entry(self)

    def set_id(self, run, subrun, event):
        return _processor.ProcessDriver_set_id(self, run, subrun, event)

    def event_id(self):
        return _processor.ProcessDriver_event_id(self)

    def process_id(self, name):
        return _processor.ProcessDriver_process_id(self, name)

    def process_names(self):
        return _processor.ProcessDriver_process_names(self)

    def process_map(self):
        return _processor.ProcessDriver_process_map(self)

    def process_ptr(self, id):
        return _processor.ProcessDriver_process_ptr(self, id)

    def io(self):
        return _processor.ProcessDriver_io(self)

    def get_tree_index(self, entry):
        return _processor.ProcessDriver_get_tree_index(self, entry)

    def processing(self):
        return _processor.ProcessDriver_processing(self)
ProcessDriver_swigregister = _processor.ProcessDriver_swigregister
ProcessDriver_swigregister(ProcessDriver)

class ProcessFactoryBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProcessFactoryBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProcessFactoryBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _processor.delete_ProcessFactoryBase
    __del__ = lambda self: None

    def create(self, instance_name):
        return _processor.ProcessFactoryBase_create(self, instance_name)
ProcessFactoryBase_swigregister = _processor.ProcessFactoryBase_swigregister
ProcessFactoryBase_swigregister(ProcessFactoryBase)

class ProcessFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProcessFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProcessFactory, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _processor.new_ProcessFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _processor.delete_ProcessFactory
    __del__ = lambda self: None
    if _newclass:
        get = staticmethod(_processor.ProcessFactory_get)
    else:
        get = _processor.ProcessFactory_get

    def add_factory(self, name, factory):
        return _processor.ProcessFactory_add_factory(self, name, factory)

    def create(self, name, instance_name):
        return _processor.ProcessFactory_create(self, name, instance_name)
ProcessFactory_swigregister = _processor.ProcessFactory_swigregister
ProcessFactory_swigregister(ProcessFactory)

def ProcessFactory_get():
    return _processor.ProcessFactory_get()
ProcessFactory_get = _processor.ProcessFactory_get

# This file is compatible with both classic and new-style classes.


